// Generated by Haxe 4.2.1+bf9ff69
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DeepState = function() { };
$hxClasses["DeepState"] = DeepState;
DeepState.__name__ = true;
var ds_gen_DeepState = function(state,stateTypes,stateType,middlewares) {
	if(state == null) {
		throw haxe_Exception.thrown("state is null");
	}
	this.state = state;
	if(stateTypes == null) {
		throw haxe_Exception.thrown("stateTypes is null");
	}
	this.stateTypes = stateTypes;
	if(stateType == null) {
		throw haxe_Exception.thrown("stateType is null");
	}
	this.stateType = stateType;
	this.middlewares = middlewares == null ? ds_ImmutableArray.fromArray([]) : middlewares;
};
$hxClasses["ds.gen.DeepState"] = ds_gen_DeepState;
ds_gen_DeepState.__name__ = true;
ds_gen_DeepState.prototype = {
	copyAsset: function(newState,middlewares) {
		throw haxe_Exception.thrown("DeepState.copyAsset must be overridden in subclass.");
	}
	,_createAndReplace: function(currentState,path,newValue) {
		var _gthis = this;
		var error = function() {
			var tmp = newValue;
			throw haxe_Exception.thrown("Invalid DeepState update: " + Std.string(path) + " (" + (tmp == null ? "null" : Std.string(tmp)) + ")");
		};
		var iter_current;
		var iter_array;
		iter_current = 0;
		iter_array = path;
		var createNew = null;
		createNew = function(currentObject,curState) {
			while(true) {
				if(iter_current >= iter_array.length) {
					return newValue;
				} else {
					iter_current += 1;
					var _g = iter_array[iter_current - 1];
					switch(_g._hx_index) {
					case 0:
						var name = _g.name;
						switch(curState._hx_index) {
						case 10:
							var type = curState.type;
							var curState1 = _gthis.stateTypes.h[type];
							if(curState1 == null) {
								error();
							} else {
								curState = curState1;
								continue;
							}
							break;
						case 11:
							var fields = curState.fields;
							var data = Reflect.copy(currentObject);
							if(data == null) {
								return null;
							}
							var field = fields.h[name];
							if(field == null) {
								error();
							} else {
								var curObj = Reflect.field(currentObject,name);
								if(curObj == null) {
									error();
								} else {
									var newObj = createNew(curObj,field);
									data[name] = newObj;
								}
							}
							return data;
						case 12:
							var cls = curState.cls;
							var fields1 = curState.fields;
							var this1 = { };
							var data1 = this1;
							var h = fields1.h;
							var f_keys = Object.keys(h);
							var f_length = f_keys.length;
							var f_current = 0;
							while(f_current < f_length) {
								var f = f_keys[f_current++];
								data1[f] = Reflect.field(currentObject,f);
							}
							var field1 = fields1.h[name];
							if(field1 == null) {
								error();
							} else {
								data1[name] = createNew(Reflect.field(currentObject,name),field1);
							}
							return Type.createInstance($hxClasses[cls],[data1]);
						default:
							error();
						}
						break;
					case 1:
						var index = _g.index;
						if(curState._hx_index == 13) {
							var type1 = curState.type;
							var newArray = currentObject.slice();
							newArray[index] = createNew(newArray[index],type1);
							return newArray;
						} else {
							error();
						}
						break;
					case 2:
						var key = _g.key;
						if(curState._hx_index == 14) {
							var type2 = curState.type;
							var currentMap = currentObject;
							var currentObj = currentMap.get(key);
							if(currentObj == null) {
								error();
							} else {
								return ds_ImmutableMap.set(currentMap,key,createNew(currentObj,type2));
							}
						} else {
							error();
						}
						break;
					}
				}
				error();
				throw haxe_Exception.thrown("_createAndReplace error");
			}
		};
		var newObj = createNew(currentState,this.stateType);
		if(newObj == null) {
			error();
		}
		return newObj;
	}
	,_updateState: function(action) {
		var _gthis = this;
		var copyAndUpdateState = function(action) {
			var newState = _gthis.state;
			var _g = 0;
			var _g1 = action.updates;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var path = [a.path];
				var newValue = [a.value];
				var _gthis1 = [_gthis];
				var error = [(function(newValue,path) {
					return function() {
						var tmp = newValue[0];
						throw haxe_Exception.thrown("Invalid DeepState update: " + Std.string(path[0]) + " (" + (tmp == null ? "null" : Std.string(tmp)) + ")");
					};
				})(newValue,path)];
				var iter_current = [];
				var iter_array = [];
				iter_current[0] = 0;
				iter_array[0] = path[0];
				var createNew = [null];
				createNew[0] = (function(iter_current,iter_array,createNew,error,_gthis,newValue) {
					return function(currentObject,curState) {
						if(iter_current[0] >= iter_array[0].length) {
							return newValue[0];
						} else {
							var _g = iter_array[0][iter_current[0]++];
							switch(_g._hx_index) {
							case 0:
								var name = _g.name;
								switch(curState._hx_index) {
								case 10:
									var type = curState.type;
									var curState1 = _gthis[0].stateTypes.h[type];
									if(curState1 == null) {
										error[0]();
									} else {
										return createNew[0](currentObject,curState1);
									}
									break;
								case 11:
									var fields = curState.fields;
									var data = Reflect.copy(currentObject);
									if(data == null) {
										return null;
									}
									var field = fields.h[name];
									if(field == null) {
										error[0]();
									} else {
										var curObj = Reflect.field(currentObject,name);
										if(curObj == null) {
											error[0]();
										} else {
											var newObj = createNew[0](curObj,field);
											data[name] = newObj;
										}
									}
									return data;
								case 12:
									var cls = curState.cls;
									var fields = curState.fields;
									var this1 = { };
									var data = this1;
									var h = fields.h;
									var f_keys = Object.keys(h);
									var f_length = f_keys.length;
									var f_current = 0;
									while(f_current < f_length) {
										var f = f_keys[f_current++];
										data[f] = Reflect.field(currentObject,f);
									}
									var field = fields.h[name];
									if(field == null) {
										error[0]();
									} else {
										data[name] = createNew[0](Reflect.field(currentObject,name),field);
									}
									return Type.createInstance($hxClasses[cls],[data]);
								default:
									error[0]();
								}
								break;
							case 1:
								var index = _g.index;
								if(curState._hx_index == 13) {
									var type = curState.type;
									var newArray = currentObject.slice();
									newArray[index] = createNew[0](newArray[index],type);
									return newArray;
								} else {
									error[0]();
								}
								break;
							case 2:
								var key = _g.key;
								if(curState._hx_index == 14) {
									var type = curState.type;
									var currentMap = currentObject;
									var currentObj = currentMap.get(key);
									if(currentObj == null) {
										error[0]();
									} else {
										return ds_ImmutableMap.set(currentMap,key,createNew[0](currentObj,type));
									}
								} else {
									error[0]();
								}
								break;
							}
						}
						error[0]();
						throw haxe_Exception.thrown("_createAndReplace error");
					};
				})(iter_current,iter_array,createNew,error,_gthis1,newValue);
				var newObj = createNew[0](newState,_gthis.stateType);
				if(newObj == null) {
					error[0]();
				}
				newState = newObj;
			}
			return _gthis.copyAsset(newState,_gthis.middlewares);
		};
		var dispatch = copyAndUpdateState;
		var _g = 0;
		var _g1 = ds_ImmutableArray.reverse(this.middlewares);
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			dispatch = (function(_g,a2,a1) {
				return function(a3) {
					return _g[0](a1[0],a2[0],a3);
				};
			})([m],[dispatch],[this]);
		}
		return dispatch(action);
	}
	,__class__: ds_gen_DeepState
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.createCopy = function(h) {
	var copy = new haxe_ds_StringMap();
	for (var key in h) copy.h[key] = h[key];
	return copy;
};
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,copy: function() {
		return haxe_ds_StringMap.createCopy(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var ds_StateObjectType = $hxEnums["ds.StateObjectType"] = { __ename__:true,__constructs__:null
	,Bool: {_hx_name:"Bool",_hx_index:0,__enum__:"ds.StateObjectType",toString:$estr}
	,String: {_hx_name:"String",_hx_index:1,__enum__:"ds.StateObjectType",toString:$estr}
	,Int: {_hx_name:"Int",_hx_index:2,__enum__:"ds.StateObjectType",toString:$estr}
	,Int32: {_hx_name:"Int32",_hx_index:3,__enum__:"ds.StateObjectType",toString:$estr}
	,Int64: {_hx_name:"Int64",_hx_index:4,__enum__:"ds.StateObjectType",toString:$estr}
	,Float: {_hx_name:"Float",_hx_index:5,__enum__:"ds.StateObjectType",toString:$estr}
	,Date: {_hx_name:"Date",_hx_index:6,__enum__:"ds.StateObjectType",toString:$estr}
	,Enumm: {_hx_name:"Enumm",_hx_index:7,__enum__:"ds.StateObjectType",toString:$estr}
	,ImmutableList: {_hx_name:"ImmutableList",_hx_index:8,__enum__:"ds.StateObjectType",toString:$estr}
	,ImmutableJson: {_hx_name:"ImmutableJson",_hx_index:9,__enum__:"ds.StateObjectType",toString:$estr}
	,Recursive: ($_=function(type) { return {_hx_index:10,type:type,__enum__:"ds.StateObjectType",toString:$estr}; },$_._hx_name="Recursive",$_.__params__ = ["type"],$_)
	,Anonymous: ($_=function(fields) { return {_hx_index:11,fields:fields,__enum__:"ds.StateObjectType",toString:$estr}; },$_._hx_name="Anonymous",$_.__params__ = ["fields"],$_)
	,Instance: ($_=function(cls,fields) { return {_hx_index:12,cls:cls,fields:fields,__enum__:"ds.StateObjectType",toString:$estr}; },$_._hx_name="Instance",$_.__params__ = ["cls","fields"],$_)
	,Array: ($_=function(type) { return {_hx_index:13,type:type,__enum__:"ds.StateObjectType",toString:$estr}; },$_._hx_name="Array",$_.__params__ = ["type"],$_)
	,Map: ($_=function(type) { return {_hx_index:14,type:type,__enum__:"ds.StateObjectType",toString:$estr}; },$_._hx_name="Map",$_.__params__ = ["type"],$_)
};
ds_StateObjectType.__constructs__ = [ds_StateObjectType.Bool,ds_StateObjectType.String,ds_StateObjectType.Int,ds_StateObjectType.Int32,ds_StateObjectType.Int64,ds_StateObjectType.Float,ds_StateObjectType.Date,ds_StateObjectType.Enumm,ds_StateObjectType.ImmutableList,ds_StateObjectType.ImmutableJson,ds_StateObjectType.Recursive,ds_StateObjectType.Anonymous,ds_StateObjectType.Instance,ds_StateObjectType.Array,ds_StateObjectType.Map];
var DeepState_$State = function(initialState,middlewares) {
	ds_gen_DeepState.call(this,initialState,DeepState_$State._stateTypes,DeepState_$State._stateTypes.h["State"],middlewares);
};
$hxClasses["DeepState_State"] = DeepState_$State;
DeepState_$State.__name__ = true;
DeepState_$State.__super__ = ds_gen_DeepState;
DeepState_$State.prototype = $extend(ds_gen_DeepState.prototype,{
	updateState: function(action) {
		return js_Boot.__cast(this._updateState(action) , DeepState_$State);
	}
	,copyAsset: function(newState,middlewares) {
		return new DeepState_$State(newState == null ? this.state : newState,middlewares == null ? this.middlewares : middlewares);
	}
	,__class__: DeepState_$State
});
var haxecontracts_HaxeContracts = function() { };
$hxClasses["haxecontracts.HaxeContracts"] = haxecontracts_HaxeContracts;
haxecontracts_HaxeContracts.__name__ = true;
haxecontracts_HaxeContracts.__isInterface__ = true;
var GameState = function() { };
$hxClasses["GameState"] = GameState;
GameState.__name__ = true;
GameState.__interfaces__ = [haxecontracts_HaxeContracts];
GameState.validate = function(asset) {
	var state = asset.state;
	try {
		if(!(state.fruit.x >= 0 && state.fruit.x < state.playfield.width && state.fruit.y >= 0 && state.fruit.y < state.playfield.height)) {
			throw haxe_Exception.thrown(new haxecontracts_ContractException("Fruit outside playfield.",null,[asset],null,{ fileName : "src/GameState.hx", lineNumber : 33, className : "GameState", methodName : "validate"}));
		}
	} catch( _g ) {
		throw haxe_Exception.thrown(new haxecontracts_ContractException("Fruit outside playfield.",null,[asset],haxe_Exception.caught(_g).unwrap(),{ fileName : "src/GameState.hx", lineNumber : 33, className : "GameState", methodName : "validate"}));
	}
	try {
		if(ds_ImmutableArray.exists(state.snake.segments,function(s) {
			if(!(s.x < 0 || s.x >= state.playfield.width)) {
				if(s.y >= 0) {
					return s.y >= state.playfield.height;
				} else {
					return true;
				}
			} else {
				return true;
			}
		})) {
			throw haxe_Exception.thrown(new haxecontracts_ContractException("Snake segment outside playfield.",null,[asset],null,{ fileName : "src/GameState.hx", lineNumber : 37, className : "GameState", methodName : "validate"}));
		}
	} catch( _g ) {
		throw haxe_Exception.thrown(new haxecontracts_ContractException("Snake segment outside playfield.",null,[asset],haxe_Exception.caught(_g).unwrap(),{ fileName : "src/GameState.hx", lineNumber : 37, className : "GameState", methodName : "validate"}));
	}
	try {
		if(!(state.snake.currentDirection > 0)) {
			throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.snake.currentDirection > 0]",null,[asset],null,{ fileName : "src/GameState.hx", lineNumber : 42, className : "GameState", methodName : "validate"}));
		}
	} catch( _g ) {
		throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.snake.currentDirection > 0]",null,[asset],haxe_Exception.caught(_g).unwrap(),{ fileName : "src/GameState.hx", lineNumber : 42, className : "GameState", methodName : "validate"}));
	}
	try {
		if(!(state.snake.wantedDirection > 0)) {
			throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.snake.wantedDirection > 0]",null,[asset],null,{ fileName : "src/GameState.hx", lineNumber : 43, className : "GameState", methodName : "validate"}));
		}
	} catch( _g ) {
		throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.snake.wantedDirection > 0]",null,[asset],haxe_Exception.caught(_g).unwrap(),{ fileName : "src/GameState.hx", lineNumber : 43, className : "GameState", methodName : "validate"}));
	}
	try {
		if(!(state.snake.nextMoveTime >= 0)) {
			throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.snake.nextMoveTime >= 0]",null,[asset],null,{ fileName : "src/GameState.hx", lineNumber : 44, className : "GameState", methodName : "validate"}));
		}
	} catch( _g ) {
		throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.snake.nextMoveTime >= 0]",null,[asset],haxe_Exception.caught(_g).unwrap(),{ fileName : "src/GameState.hx", lineNumber : 44, className : "GameState", methodName : "validate"}));
	}
	try {
		if(state.score < 0) {
			throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.score >= 0]",null,[asset],null,{ fileName : "src/GameState.hx", lineNumber : 46, className : "GameState", methodName : "validate"}));
		}
	} catch( _g ) {
		throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.score >= 0]",null,[asset],haxe_Exception.caught(_g).unwrap(),{ fileName : "src/GameState.hx", lineNumber : 46, className : "GameState", methodName : "validate"}));
	}
	try {
		if(state.hiScore < 0) {
			throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.hiScore >= 0]",null,[asset],null,{ fileName : "src/GameState.hx", lineNumber : 47, className : "GameState", methodName : "validate"}));
		}
	} catch( _g ) {
		throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.hiScore >= 0]",null,[asset],haxe_Exception.caught(_g).unwrap(),{ fileName : "src/GameState.hx", lineNumber : 47, className : "GameState", methodName : "validate"}));
	}
	try {
		if(state.playfield.width <= 0) {
			throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.playfield.width > 0]",null,[asset],null,{ fileName : "src/GameState.hx", lineNumber : 49, className : "GameState", methodName : "validate"}));
		}
	} catch( _g ) {
		throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.playfield.width > 0]",null,[asset],haxe_Exception.caught(_g).unwrap(),{ fileName : "src/GameState.hx", lineNumber : 49, className : "GameState", methodName : "validate"}));
	}
	try {
		if(state.playfield.height <= 0) {
			throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.playfield.height > 0]",null,[asset],null,{ fileName : "src/GameState.hx", lineNumber : 50, className : "GameState", methodName : "validate"}));
		}
	} catch( _g ) {
		throw haxe_Exception.thrown(new haxecontracts_ContractException("Contract precondition failed for: [state.playfield.height > 0]",null,[asset],haxe_Exception.caught(_g).unwrap(),{ fileName : "src/GameState.hx", lineNumber : 50, className : "GameState", methodName : "validate"}));
	}
	return asset;
};
var dci_Context = function() { };
$hxClasses["dci.Context"] = dci_Context;
dci_Context.__name__ = true;
dci_Context.__isInterface__ = true;
var GameView = function(game,asset,segmentPixelSize,logger) {
	this._game = game;
	this._asset = asset;
	this._tweens = [];
	this._segmentPixelSize = segmentPixelSize;
	this._logger = logger;
	var playfield = this._asset.state.playfield;
	var _g = $bind(this,this.create);
	var playfieldWidth = playfield.width * segmentPixelSize;
	var playfieldHeight = playfield.height * segmentPixelSize;
	var segmentSize = segmentPixelSize;
	var tmp = function() {
		_g(playfieldWidth,playfieldHeight,segmentSize);
	};
	this._game.state.add("Game",{ preload : $bind(this,this.preload), create : tmp, update : $bind(this,this.update)});
};
$hxClasses["GameView"] = GameView;
GameView.__name__ = true;
GameView.__interfaces__ = [dci_Context];
GameView.prototype = {
	start: function() {
		if(this._game.state.current == "Game") {
			throw haxe_Exception.thrown("Game already started.");
		}
		this._game.state.start("Game");
	}
	,preload: function() {
		this._textures = new _$GameView_Textures(this._game,this._segmentPixelSize);
	}
	,create: function(playfieldWidth,playfieldHeight,segmentSize) {
		var textures = NullTools.sure(this._textures);
		this._game.add.tileSprite(0,0,Math.max(playfieldWidth,this._game.width),Math.max(playfieldHeight,this._game.height),textures.background);
		var scrollWidth = playfieldWidth > this._game.width;
		var scrollHeight = playfieldHeight > this._game.height;
		var widthOffset = scrollWidth ? -2 : 2;
		var heightOffset = scrollHeight ? -2 : 2;
		var border = this._game.make.graphics();
		border.lineStyle(2,13421772,1);
		border.beginFill(1118481,0.85);
		border.drawRect(0,0,playfieldWidth + widthOffset,playfieldHeight + heightOffset);
		border.endFill();
		var playfieldBorder = this._game.add.sprite(0,0,border.generateTexture());
		var group = this._game.add.group();
		group.x = scrollWidth ? 0 : (this._game.world.width - playfieldWidth) / 2;
		group.y = scrollHeight ? 0 : (this._game.world.height - playfieldWidth) / 2;
		this._game.world.setBounds(0,0,Math.max(this._game.width,playfieldWidth),Math.max(this._game.height,playfieldHeight));
		playfieldBorder.x = scrollWidth ? 0 : group.x - 2;
		playfieldBorder.y = scrollHeight ? 0 : group.y - 2;
		var state = this._asset.state;
		this.SCORE = this._game.add.text(10,10,"Score: " + state.score,{ font : "20px Arial", fill : "#ffffff", align : "left", boundsAlignH : "left", boundsAlignV : "top"});
		var highScore = state.hiScore;
		this.HISCORE = this._game.add.text(0,0,"Hi-score: " + highScore,{ font : "20px Arial", fill : "#ffffff", align : "right", boundsAlignH : "right", boundsAlignV : "top"}).setTextBounds(this._game.world.width - 150,10,140,20);
		var fruit = group.create(0,0,NullTools.sure(this._textures).fruit);
		fruit.anchor = new PIXI.Point(0.5,0.5);
		var tween = this._game.add.tween(fruit).to({ angle : 360},550,"Linear",true,1000).repeat(-1,1000);
		this._tweens.push(tween);
		this.FRUIT = fruit;
		this.SNAKE = group.add(this._game.add.group());
		var X = state.playfield.width / 2 | 0;
		var Y = state.playfield.height / 2 | 0;
		var startSegments = [{ x : X, y : Y},{ x : X - 1, y : Y},{ x : X - 2, y : Y}];
		var fruitStartPos = { x : Std.random(state.playfield.width) | 0, y : Std.random(state.playfield.height) | 0};
		var hi = window.localStorage.getItem("hiScore");
		var hiScore = Std.parseInt(hi);
		this._asset = this._asset.updateState({ type : "InitialState", updates : ds_ImmutableArray.fromArray([{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("snake")]), value : { segments : startSegments, nextMoveTime : 0.0, currentDirection : Phaser.RIGHT, wantedDirection : Phaser.RIGHT, moveCounter : 10000}},{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("score")]), value : 0},{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("hiScore")]), value : hiScore == null ? 0 : hiScore},{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("fruit")]), value : fruitStartPos},{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("active")]), value : true}])});
	}
	,update: function() {
		var state = this._asset.state;
		this.SNAKE__display(state.snake.segments);
		this.FRUIT__display(state.fruit);
		this.SCORE__display(state.score);
		this.HISCORE__display(state.hiScore);
		if(state.active) {
			var next = new contexts_Movement(this._asset).move(this._game.time.physicsElapsedMS);
			next = new contexts_Controlling(next,this._game.input.keyboard.createCursorKeys()).checkDirection();
			next = new contexts_Collisions(next).checkCollisions(this._game);
			this._asset = next;
		} else {
			var _g = 0;
			var _g1 = this._tweens;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				t.stop();
			}
		}
	}
	,FRUIT__display: function(coord) {
		var pixelX = coord.x * this._segmentPixelSize + this._segmentPixelSize / 2;
		var pixelY = coord.y * this._segmentPixelSize + this._segmentPixelSize / 2;
		this.FRUIT.x = pixelX;
		this.FRUIT.y = pixelY;
	}
	,SNAKE__display: function(segments) {
		var i = 0;
		var textures = NullTools.sure(this._textures);
		var _g = 0;
		var _g1 = segments;
		while(_g < _g1.length) {
			var segment = _g1[_g];
			++_g;
			var pixelX = segment.x * this._segmentPixelSize;
			var pixelY = segment.y * this._segmentPixelSize;
			if(i >= this.SNAKE.length) {
				var newSprite = this._game.add.sprite(pixelX,pixelY,this.SNAKE.length == 0 ? textures.head : textures.segment);
				this.SNAKE.addChild(newSprite);
				if(i == 0) {
					this._game.camera.follow(newSprite);
				}
			} else {
				this.SNAKE.xy(i,pixelX,pixelY);
			}
			++i;
		}
		while(i < this.SNAKE.length) this.SNAKE.removeChildAt(this.SNAKE.length - 1 | 0);
	}
	,SCORE__display: function(score) {
		this.SCORE.setText("Score: " + score,false);
	}
	,HISCORE__display: function(hiscore) {
		this.HISCORE.setText("Hi-score: " + hiscore,false);
	}
	,__class__: GameView
};
var _$GameView_Textures = function(game,segmentSize) {
	var head = game.make.graphics();
	head.lineStyle(1,16777215,1);
	head.beginFill(13586443,1);
	head.drawRect(0,0,segmentSize - 1,segmentSize - 1);
	head.endFill();
	var segment = game.make.graphics();
	segment.lineStyle(1,16777215,1);
	segment.beginFill(16740363,1);
	segment.drawRect(0,0,segmentSize - 1,segmentSize - 1);
	segment.endFill();
	var fruit = game.make.graphics();
	fruit.lineStyle(1,16720435,1);
	fruit.beginFill(16724804,1);
	fruit.drawRect(0,0,segmentSize - 4,segmentSize - 4);
	fruit.endFill();
	game.load.image("background","assets/connectwork.png");
	this.head = head.generateTexture();
	this.segment = segment.generateTexture();
	this.fruit = fruit.generateTexture();
	this.background = "background";
};
$hxClasses["_GameView.Textures"] = _$GameView_Textures;
_$GameView_Textures.__name__ = true;
_$GameView_Textures.prototype = {
	__class__: _$GameView_Textures
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = true;
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			_g.push(x1);
		}
	}
	return _g;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			_.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Lambda.concat = function(a,b) {
	var l = [];
	var x = $getIterator(a);
	while(x.hasNext()) {
		var x1 = x.next();
		l.push(x1);
	}
	var x = $getIterator(b);
	while(x.hasNext()) {
		var x1 = x.next();
		l.push(x1);
	}
	return l;
};
var Main = function(width,height,playfieldSize,segmentSize) {
	if(segmentSize == null) {
		segmentSize = 20;
	}
	if(playfieldSize == null) {
		playfieldSize = 20;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 600;
	}
	var logger = new MiddlewareLog();
	var asset = new DeepState_$State({ snake : { segments : ds_ImmutableArray.fromArray([]), nextMoveTime : 0, currentDirection : Phaser.RIGHT, wantedDirection : Phaser.RIGHT, moveCounter : 10000}, fruit : { x : 0, y : 0}, score : 0, hiScore : 0, playfield : { width : playfieldSize, height : playfieldSize}, active : false},ds_ImmutableArray.fromArray([$bind(logger,logger.log),function(_,next,action) {
		return GameState.validate(next(action));
	}]));
	var game = new Phaser.Game(width,height,Phaser.AUTO,"snakedci");
	this._gameView = new GameView(game,asset,segmentSize,logger);
};
$hxClasses["Main"] = Main;
Main.__name__ = true;
Main.__interfaces__ = [dci_Context];
Main.main = function() {
	new Main().start();
};
Main.prototype = {
	start: function() {
		this._gameView.start();
	}
	,__class__: Main
};
var MiddlewareLog = function() {
	this.logs = [];
};
$hxClasses["MiddlewareLog"] = MiddlewareLog;
MiddlewareLog.__name__ = true;
MiddlewareLog.prototype = {
	log: function(asset,next,action) {
		var newState = next(action);
		this.logs.push({ state : newState.state, type : action.type, timestamp : new Date()});
		return newState;
	}
	,__class__: MiddlewareLog
};
Math.__name__ = true;
var NullTools = function() { };
$hxClasses["NullTools"] = NullTools;
NullTools.__name__ = true;
NullTools.sure = function(value) {
	if(value == null) {
		throw haxe_Exception.thrown("null pointer in .sure() call");
	}
	return value;
};
NullTools.or = function(value,defaultValue) {
	if(value == null) {
		return defaultValue;
	}
	return value;
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
var contexts_Collisions = function(asset) {
	this.SNAKE = asset.state.snake;
	this.FRUIT = asset.state.fruit;
	this.GAME = asset.state;
	this._asset = asset;
};
$hxClasses["contexts.Collisions"] = contexts_Collisions;
contexts_Collisions.__name__ = true;
contexts_Collisions.__interfaces__ = [dci_Context];
contexts_Collisions.prototype = {
	checkCollisions: function(game) {
		if(this.SNAKE__checkForFruitCollision()) {
			return this.FRUIT__moveToRandomLocation();
		} else if(this.SNAKE__checkForCollisionWithItself()) {
			return new contexts_GameOver(this._asset,game).start();
		} else {
			return this._asset;
		}
	}
	,collides: function(c1,c2) {
		if(c1.x == c2.x) {
			return c1.y == c2.y;
		} else {
			return false;
		}
	}
	,SNAKE__checkForFruitCollision: function() {
		return this.SNAKE__collidesWith(this.FRUIT);
	}
	,SNAKE__checkForCollisionWithItself: function() {
		var head = this.SNAKE.segments[0];
		var body = ds_ImmutableArray.shift(this.SNAKE.segments);
		return ds_ImmutableArray.exists(body,function(seg) {
			if(seg.x == head.x) {
				return seg.y == head.y;
			} else {
				return false;
			}
		});
	}
	,SNAKE__collidesWith: function(coord) {
		return ds_ImmutableArray.exists(this.SNAKE.segments,function(seg) {
			if(seg.x == coord.x) {
				return seg.y == coord.y;
			} else {
				return false;
			}
		});
	}
	,SNAKE__addSegment: function(fruitPos,score) {
		var newSegments = ds_ImmutableArray.push(this.SNAKE.segments,this.SNAKE.segments[this.SNAKE.segments.length - 1]);
		var moveTime = new contexts_Scoring(ds_ImmutableArray.array(this.SNAKE.segments),this.SNAKE.segments[0],fruitPos,this._asset.state.playfield).allowedMovesUntilScoreDecrease();
		return this._asset.updateState({ type : "SNAKE.addSegment", updates : ds_ImmutableArray.fromArray([{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("score")]), value : score},{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("fruit")]), value : fruitPos},{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("snake"),ds_PathAccess.Field("segments")]), value : newSegments},{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("snake"),ds_PathAccess.Field("moveCounter")]), value : moveTime}])});
	}
	,FRUIT__moveToRandomLocation: function() {
		var newPos;
		while(true) {
			var newX = Std.random(this._asset.state.playfield.width);
			var newY = Std.random(this._asset.state.playfield.height);
			newPos = { x : newX, y : newY};
			if(!this.SNAKE__collidesWith(newPos)) {
				break;
			}
		}
		return this.GAME__increaseScore(newPos);
	}
	,GAME__increaseScore: function(newFruitPos) {
		return this.SNAKE__addSegment(newFruitPos,this.GAME.score + 10);
	}
	,__class__: contexts_Collisions
};
var contexts_Controlling = function(asset,CONTROLLER) {
	this.SNAKE = asset.state.snake;
	this.CONTROLLER = CONTROLLER;
	this._asset = asset;
};
$hxClasses["contexts.Controlling"] = contexts_Controlling;
contexts_Controlling.__name__ = true;
contexts_Controlling.__interfaces__ = [dci_Context];
contexts_Controlling.prototype = {
	checkDirection: function() {
		return this.SNAKE__checkDirection();
	}
	,SNAKE__checkDirection: function() {
		var wantedDirection = this.CONTROLLER__direction();
		if(wantedDirection == 0) {
			return this._asset;
		} else {
			return this._asset.updateState({ type : "Controlling.SNAKE__checkDirection", updates : ds_ImmutableArray.fromArray([{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("snake"),ds_PathAccess.Field("wantedDirection")]), value : wantedDirection}])});
		}
	}
	,CONTROLLER__direction: function() {
		if(this.CONTROLLER.left.isDown) {
			return Phaser.LEFT;
		} else if(this.CONTROLLER.right.isDown) {
			return Phaser.RIGHT;
		} else if(this.CONTROLLER.up.isDown) {
			return Phaser.UP;
		} else if(this.CONTROLLER.down.isDown) {
			return Phaser.DOWN;
		} else {
			return 0;
		}
	}
	,__class__: contexts_Controlling
};
var contexts_GameOver = function(asset,game) {
	this.SCREEN = game;
	this.GAME = asset.state;
	this.CONTROLLER = game.input;
	this._game = game;
	this._asset = asset;
};
$hxClasses["contexts.GameOver"] = contexts_GameOver;
contexts_GameOver.__name__ = true;
contexts_GameOver.__interfaces__ = [dci_Context];
contexts_GameOver.prototype = {
	start: function() {
		this.SCREEN__displayGameOver();
		return this._asset.updateState({ type : "GameOver.start", updates : ds_ImmutableArray.fromArray([{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("active")]), value : false}])});
	}
	,CONTROLLER__waitForRestart: function() {
		this.CONTROLLER.keyboard.addKey(Phaser.Keyboard.SPACEBAR).onUp.addOnce(($_=this._game.state,$bind($_,$_.restart)));
	}
	,GAME__submitHiscore: function() {
		if(this.GAME.score > this.GAME.hiScore) {
			window.localStorage.setItem("hiScore",Std.string(this.GAME.score));
		}
		this.CONTROLLER__waitForRestart();
	}
	,SCREEN__displayGameOver: function() {
		this.SCREEN.add.text(0,0,"GAME OVER",{ font : "50px Arial", fill : "#ffffff", stroke : "#000000", strokeThickness : 3, align : "center", boundsAlignH : "center", boundsAlignV : "middle"}).setTextBounds(0,-20,this.SCREEN.width,this.SCREEN.height);
		this.SCREEN.add.text(0,0,"Press space to restart",{ font : "20px Arial", fill : "#ffffff", stroke : "#000000", strokeThickness : 2, align : "center", boundsAlignH : "center", boundsAlignV : "middle"}).setTextBounds(0,30,this.SCREEN.width,this.SCREEN.height);
		this.GAME__submitHiscore();
	}
	,__class__: contexts_GameOver
};
var contexts_Movement = function(asset) {
	this._asset = asset;
	this.PLAYFIELD = asset.state.playfield;
	this.SNAKE = asset.state.snake;
	this.HEAD = asset.state.snake.segments[0];
};
$hxClasses["contexts.Movement"] = contexts_Movement;
contexts_Movement.__name__ = true;
contexts_Movement.__interfaces__ = [dci_Context];
contexts_Movement.prototype = {
	move: function(msElapsed) {
		var movementTime = this._asset.state.snake.nextMoveTime - msElapsed;
		if(movementTime <= 0) {
			return this.HEAD__moveOneStepAhead(movementTime);
		} else {
			return this._asset.updateState({ type : "Movement.updateMoveTimer", updates : ds_ImmutableArray.fromArray([{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("snake"),ds_PathAccess.Field("nextMoveTime")]), value : movementTime}])});
		}
	}
	,dir2Text: function(dir) {
		if(dir == Phaser.UP) {
			return "UP";
		} else if(dir == Phaser.DOWN) {
			return "DOWN";
		} else if(dir == Phaser.LEFT) {
			return "LEFT";
		} else if(dir == Phaser.RIGHT) {
			return "RIGHT";
		} else {
			return "<NOWHERE>";
		}
	}
	,SNAKE__moveTo: function(x,y,newDir,timerDelta) {
		var newPos = ds_ImmutableArray.unshift(ds_ImmutableArray.pop(this.SNAKE.segments),{ x : x, y : y});
		var speedMs = this.SNAKE__moveSpeed(newPos.length) + timerDelta;
		var moveCounter = this._asset.state.snake.moveCounter - 1;
		var scoreDecrease = this._asset.state.score - (moveCounter >= 0 ? 0 : new contexts_Scoring(ds_ImmutableArray.array(this.SNAKE.segments),this.HEAD,this._asset.state.fruit,this._asset.state.playfield).scoreDecrease(-moveCounter,this._asset.state.score));
		return this._asset.updateState({ type : "SNAKE.moveTo", updates : ds_ImmutableArray.fromArray([{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("snake")]), value : { segments : newPos, nextMoveTime : speedMs, currentDirection : newDir, wantedDirection : newDir, moveCounter : moveCounter}},{ path : ds_ImmutableArray.fromArray([ds_PathAccess.Field("score")]), value : scoreDecrease}])});
	}
	,SNAKE__moveDirection: function() {
		if(this.SNAKE.wantedDirection == Phaser.RIGHT && this.SNAKE.currentDirection == Phaser.LEFT || this.SNAKE.wantedDirection == Phaser.LEFT && this.SNAKE.currentDirection == Phaser.RIGHT || this.SNAKE.wantedDirection == Phaser.UP && this.SNAKE.currentDirection == Phaser.DOWN || this.SNAKE.wantedDirection == Phaser.DOWN && this.SNAKE.currentDirection == Phaser.UP) {
			return this.SNAKE.currentDirection;
		} else {
			return this.SNAKE.wantedDirection;
		}
	}
	,SNAKE__moveSpeed: function(numberOfSegments) {
		return Math.max(150 - numberOfSegments * 3,50);
	}
	,HEAD__moveOneStepAhead: function(timerDelta) {
		var nextX = this.HEAD.x;
		var nextY = this.HEAD.y;
		var moveDir = this.SNAKE__moveDirection();
		if(moveDir == Phaser.UP) {
			nextY = this.HEAD.y - 1;
		} else if(moveDir == Phaser.DOWN) {
			nextY = this.HEAD.y + 1;
		} else if(moveDir == Phaser.LEFT) {
			nextX = this.HEAD.x - 1;
		} else if(moveDir == Phaser.RIGHT) {
			nextX = this.HEAD.x + 1;
		}
		if(nextX >= this.PLAYFIELD.width) {
			nextX = 0;
		} else if(nextX < 0) {
			nextX = this.PLAYFIELD.width - 1;
		}
		if(nextY >= this.PLAYFIELD.height) {
			nextY = 0;
		} else if(nextY < 0) {
			nextY = this.PLAYFIELD.height - 1;
		}
		return this.SNAKE__moveTo(nextX,nextY,moveDir,timerDelta);
	}
	,__class__: contexts_Movement
};
var contexts_Scoring = function(snake,head,fruit,playfield) {
	this.SNAKE = snake;
	this.HEAD = head;
	this.FRUIT = fruit;
	this.PLAYFIELD = playfield;
};
$hxClasses["contexts.Scoring"] = contexts_Scoring;
contexts_Scoring.__name__ = true;
contexts_Scoring.__interfaces__ = [dci_Context];
contexts_Scoring.prototype = {
	allowedMovesUntilScoreDecrease: function() {
		var xDist = Math.abs(this.FRUIT.x - this.HEAD.x);
		var yDist = Math.abs(this.FRUIT.y - this.HEAD.y);
		var xDistWrapped = Math.abs(this.FRUIT.x - this.PLAYFIELD.width - this.HEAD.x);
		var yDistWrapped = Math.abs(this.FRUIT.y - this.PLAYFIELD.height - this.HEAD.y);
		return (Math.min(xDist,xDistWrapped) + Math.min(yDist,yDistWrapped)) * 1.5 + this.SNAKE__segmentLength() | 0;
	}
	,scoreDecrease: function(exceededMoves,currentScore) {
		if(currentScore == 0) {
			return 0;
		} else if(exceededMoves % 2 == 0) {
			return 1;
		} else {
			return 0;
		}
	}
	,SNAKE__segmentLength: function() {
		return this.SNAKE.length;
	}
	,__class__: contexts_Scoring
};
var ds_PathAccess = $hxEnums["ds.PathAccess"] = { __ename__:true,__constructs__:null
	,Field: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"ds.PathAccess",toString:$estr}; },$_._hx_name="Field",$_.__params__ = ["name"],$_)
	,Array: ($_=function(index) { return {_hx_index:1,index:index,__enum__:"ds.PathAccess",toString:$estr}; },$_._hx_name="Array",$_.__params__ = ["index"],$_)
	,Map: ($_=function(key) { return {_hx_index:2,key:key,__enum__:"ds.PathAccess",toString:$estr}; },$_._hx_name="Map",$_.__params__ = ["key"],$_)
};
ds_PathAccess.__constructs__ = [ds_PathAccess.Field,ds_PathAccess.Array,ds_PathAccess.Map];
var ds_ImmutableArray = {};
ds_ImmutableArray.arrayAccess = function(this1,key) {
	return this1[key];
};
ds_ImmutableArray._new = function(array) {
	return array;
};
ds_ImmutableArray.fromArray = function(array) {
	return array.slice();
};
ds_ImmutableArray.toIterable = function(this1) {
	return this1;
};
ds_ImmutableArray.copy = function(this1) {
	return this1.slice();
};
ds_ImmutableArray.insert = function(this1,pos,x) {
	var newArray = this1.slice();
	newArray.splice(pos,0,x);
	return ds_ImmutableArray.fromArray(newArray);
};
ds_ImmutableArray.pop = function(this1) {
	var newArray = this1.slice();
	newArray.pop();
	return ds_ImmutableArray.fromArray(newArray);
};
ds_ImmutableArray.push = function(this1,x) {
	var newArray = this1.slice();
	newArray.push(x);
	return ds_ImmutableArray.fromArray(newArray);
};
ds_ImmutableArray.remove = function(this1,x) {
	var newArray = this1.slice();
	if(HxOverrides.remove(newArray,x)) {
		return ds_ImmutableArray.fromArray(newArray);
	} else {
		return this1;
	}
};
ds_ImmutableArray.resize = function(this1,len) {
	var newArray = this1.slice();
	newArray.length = len;
	return ds_ImmutableArray.fromArray(newArray);
};
ds_ImmutableArray.reverse = function(this1) {
	var newArray = this1.slice();
	newArray.reverse();
	return ds_ImmutableArray.fromArray(newArray);
};
ds_ImmutableArray.shift = function(this1) {
	var newArray = this1.slice();
	newArray.shift();
	return ds_ImmutableArray.fromArray(newArray);
};
ds_ImmutableArray.slice = function(this1,pos,end) {
	return this1.slice(pos,end);
};
ds_ImmutableArray.sort = function(this1,f) {
	var newArray = this1.slice();
	newArray.sort(f);
	return ds_ImmutableArray.fromArray(newArray);
};
ds_ImmutableArray.splice = function(this1,pos,len) {
	var newArray = this1.slice();
	newArray.splice(pos,len);
	return ds_ImmutableArray.fromArray(newArray);
};
ds_ImmutableArray.unshift = function(this1,x) {
	var newArray = this1.slice();
	newArray.unshift(x);
	return ds_ImmutableArray.fromArray(newArray);
};
ds_ImmutableArray.first = function(this1) {
	if(this1.length == 0) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(this1[0]);
	}
};
ds_ImmutableArray.last = function(this1) {
	if(this1.length == 0) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(this1[this1.length - 1]);
	}
};
ds_ImmutableArray.set = function(this1,index,x) {
	var newArray = this1.slice();
	newArray[index] = x;
	return ds_ImmutableArray.fromArray(newArray);
};
ds_ImmutableArray.array = function(this1) {
	return Lambda.array(this1);
};
ds_ImmutableArray.concat = function(this1,b) {
	return Lambda.concat(this1,b);
};
ds_ImmutableArray.count = function(this1,f) {
	return Lambda.count(this1,f);
};
ds_ImmutableArray.empty = function(this1) {
	return Lambda.empty(this1);
};
ds_ImmutableArray.exists = function(this1,f) {
	return Lambda.exists(this1,f);
};
ds_ImmutableArray.filter = function(this1,f) {
	return Lambda.filter(this1,f);
};
ds_ImmutableArray.find = function(this1,f) {
	return Lambda.find(this1,f);
};
ds_ImmutableArray.flatMap = function(this1,f) {
	var _g = [];
	var _g_current = 0;
	while(_g_current < this1.length) {
		var x = this1[_g_current++];
		_g.push(f(x));
	}
	var _g1 = [];
	var e = $getIterator(_g);
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $getIterator(e1);
		while(x.hasNext()) {
			var x1 = x.next();
			_g1.push(x1);
		}
	}
	return _g1;
};
ds_ImmutableArray.fold = function(this1,f,first) {
	return Lambda.fold(this1,f,first);
};
ds_ImmutableArray.foreach = function(this1,f) {
	return Lambda.foreach(this1,f);
};
ds_ImmutableArray.has = function(this1,elt) {
	return Lambda.has(this1,elt);
};
ds_ImmutableArray.indexOf = function(this1,v) {
	return Lambda.indexOf(this1,v);
};
ds_ImmutableArray.iter = function(this1,f) {
	Lambda.iter(this1,f);
};
ds_ImmutableArray.list = function(this1) {
	return Lambda.list(this1);
};
ds_ImmutableArray.map = function(this1,f) {
	var _g = [];
	var _g_current = 0;
	while(_g_current < this1.length) {
		var x = this1[_g_current++];
		_g.push(f(x));
	}
	return _g;
};
ds_ImmutableArray.mapi = function(this1,f) {
	var i = 0;
	var _g = [];
	var _g_current = 0;
	while(_g_current < this1.length) {
		var x = this1[_g_current++];
		_g.push(f(i++,x));
	}
	return _g;
};
var ds_ImmutableMap = {};
ds_ImmutableMap.copy = function(this1) {
	return this1.copy();
};
ds_ImmutableMap.set = function(this1,key,value) {
	var newMap = this1.copy();
	newMap.set(key,value);
	return newMap;
};
ds_ImmutableMap.remove = function(this1,key) {
	var newMap = this1.copy();
	newMap.remove(key);
	return newMap;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = true;
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	while(true) if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			skip = --skip;
			pos += 1;
			continue;
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = true;
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__:true,__constructs__:null
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["v"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__constructs__ = [haxe_ds_Option.Some,haxe_ds_Option.None];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxecontracts_ContractException = function(message,object,$arguments,innerException,p) {
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.object = object;
	this.arguments = $arguments == null ? [] : $arguments;
	this.pos = p;
	this.callStack = [];
	this.innerException = innerException;
	var _g = 0;
	var _g1 = haxe_CallStack.callStack();
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(s._hx_index == 2) {
			if(s.file != "haxecontracts/ContractException.hx") {
				this.callStack.push(s);
			}
		}
	}
};
$hxClasses["haxecontracts.ContractException"] = haxecontracts_ContractException;
haxecontracts_ContractException.__name__ = true;
haxecontracts_ContractException.prototype = {
	toString: function() {
		var innerEx = this.innerException == null ? "" : ": " + Std.string(this.innerException);
		var posMsg = this.pos == null ? "" : "" + this.pos.fileName + ":" + this.pos.lineNumber;
		return this.message + (" (" + posMsg + innerEx + ") ") + Std.string(this.arguments == null ? "" : this.arguments) + (this.object != null ? " " + Std.string(this.object) : "");
	}
	,__class__: haxecontracts_ContractException
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	while(true) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		var intf = cc.__interfaces__;
		if(intf != null) {
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = _g++;
				var i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		cc = cc.__super__;
	}
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = true;
$hxClasses["Array"] = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
DeepState_$State._stateTypes = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = new haxe_ds_StringMap();
		var _g2 = new haxe_ds_StringMap();
		_g2.h["wantedDirection"] = ds_StateObjectType.Float;
		_g2.h["segments"] = ds_StateObjectType.Array(ds_StateObjectType.Recursive("Coordinate"));
		_g2.h["nextMoveTime"] = ds_StateObjectType.Float;
		_g2.h["moveCounter"] = ds_StateObjectType.Int;
		_g2.h["currentDirection"] = ds_StateObjectType.Float;
		_g1.h["snake"] = ds_StateObjectType.Anonymous(_g2);
		_g1.h["score"] = ds_StateObjectType.Int;
		var _g2 = new haxe_ds_StringMap();
		_g2.h["width"] = ds_StateObjectType.Int;
		_g2.h["height"] = ds_StateObjectType.Int;
		_g1.h["playfield"] = ds_StateObjectType.Anonymous(_g2);
		_g1.h["hiScore"] = ds_StateObjectType.Int;
		var _g2 = new haxe_ds_StringMap();
		_g2.h["y"] = ds_StateObjectType.Int;
		_g2.h["x"] = ds_StateObjectType.Int;
		_g1.h["fruit"] = ds_StateObjectType.Anonymous(_g2);
		_g1.h["active"] = ds_StateObjectType.Bool;
		_g.h["State"] = ds_StateObjectType.Anonymous(_g1);
	}
	{
		var _g1 = new haxe_ds_StringMap();
		_g1.h["y"] = ds_StateObjectType.Int;
		_g1.h["x"] = ds_StateObjectType.Int;
		_g.h["Coordinate"] = ds_StateObjectType.Anonymous(_g1);
	}
	$r = _g;
	return $r;
}(this));
GameView.__meta__ = { fields : { FRUIT : { role : null}, SNAKE : { role : null}, SCORE : { role : null}, HISCORE : { role : null}}};
contexts_Collisions.__meta__ = { fields : { SNAKE : { role : null}, FRUIT : { role : null}, GAME : { role : null}}};
contexts_Controlling.__meta__ = { fields : { SNAKE : { role : null}, CONTROLLER : { role : null}}};
contexts_GameOver.__meta__ = { fields : { CONTROLLER : { role : null}, GAME : { role : null}, SCREEN : { role : null}}};
contexts_Movement.__meta__ = { fields : { PLAYFIELD : { role : null}, SNAKE : { role : null}, HEAD : { role : null}}};
contexts_Scoring.__meta__ = { fields : { HEAD : { role : null}, FRUIT : { role : null}, SNAKE : { role : null}, PLAYFIELD : { role : null}}};
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=game.js.map